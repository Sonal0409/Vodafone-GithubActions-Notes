Agenda:
===========================
GITHUB ACTIONS for CICD
===========================

> Introduction to Github Actions 
> Components of Github Actions
> Comparision of Jenkins and Github Actions 
> Recap of YAML  
> Write simple githubActions workflow
> Jobs and runners in github actions 
> Runners -> setup self hosted runner
================================

- GitHub Actions is a Continuous Integration and Continuous Delivery Platform
- It allows us to automate our build, test and deployment tasks.
- In github actions we will be creating workflows that trigger your build process or test process whenever
      -> push into the Repo 
      -> Merge pull req in the Repo
- You can also use github action for running scripts and performing tasks like creating labels whenever somebody raises an issue in Repo
- Github actions is a tool that will allow you to run your workflows on various OS[linux,windows,mac]
- Github actions tool does not required to be downloaded or installed.
- It is tool which is available exclusively on github only 
- This tool works on individual repo 
-> It is open source, free of cost .
-> It is a simple and easy to learn tool. 
-> Does not have any dashboards like Jenkins.
-> The user that is logged in github account and is the owner/collaborator of the github repo will be able to write github actions workflow 

There are 3 main components of github Actions:

1. Workflow
- The very first thing that we will work on is the workflow 
- What automation should github action perform will be written in Workflows 
- Like in Jenkins we have pipelines, in github actions we have workflows 
- These workflows are created inside a github repo 
- The automated tasks that we want to perform on the current repo has to be written in the workflow 
- In a repository we can create many workflow 
- We will setup an event on the workflow when they have to executed like:
- Workflow is written in YAML file.
- Workflows are always defined in the .github/workflows folder 

2. Events:
An event is a specific activity in the repository that will trigger the execution of workflow like:
> on  commit on master branch 
> on commit on any other branch 
> Merge the pull requests
> manually execute 
> one workflow trigger another workflow 
> scheduled time

3. Jobs:
- A workflow consist of one or more jobs.
- These jobs have unique name 
- These jobs by default run in parallel. However we can set them up to run in sequence
- A job consist of steps 
- These steps are executed on Runners[ platform or a VM where the steps will be executed]

4. Steps:
- Most important part of workflow is a step 
- A job can have multiple steps 
- Steps are always executed in order they are written  
- you can add conditions in the workflow for execution of specific steps
- Steps can be commands/single line command/multiple commands/scrips 
- Steps can also be readymade actions given by the tool itself 
- You can use variables and conditions 

5. Actions:
- They are custom applications that are readily available in github marketplace
- We can use these action to perform complex activities or repeated tasks
- We will directly download and use these actions in our workflows 
- you can also create your own actions and make it available for the community to use.

6. Runners:
- A runner is a server where your workflow will be triggered.
- They are temporary servers provided for free by github 
- Every job can have an individual runner or multiple jobs can have single runner 
- The different runners provided by github actions is : windows, mac and linux
- each runner will be fresh newly provisioned virtual machine.
- we can also setup our own runners -> we call them as self hosted runners
- GitHub-hosted runner is a new virtual machine (VM) hosted by GitHub with the runner application and other tools preinstalled,
- It is available with Ubuntu Linux, Windows, or macOS operating systems. 
- When you use a GitHub-hosted runner, machine maintenance and upgrades are taken care of for you.

Runners for public repository
Virtual Machine	Processor (CPU)	Memory (RAM)	Storage (SSD)	Workflow label
Linux	                      4	  16 GB	        14 GB	        ubuntu-latest, ubuntu-24.04, ubuntu-22.04, ubuntu-20.04
Windows	                    4	  16 GB	        14 GB	          windows-latest, windows-2022, windows-2019
macOS	                      3	  14 GB	        14 GB	        macos-12
macOS	                      4	  14 GB	        14 GB	         macos-13
macOS	                      3   7 GB        	14 GB	        macos-latest, macos-14, macos-15 [Beta]

To write workflow we use YAML:
======================================

YAML is written in key: value 

A key storing single value:

tool: GitHub
tool2: githubactions 
tool3: jenkins 

A key storing multiple value 

tools:
  - GitHub
  - Actions 
  - jenkins
  - gitlab

A key storing again a key and value(map)

tools:
  - name: github 
    hosted: cloud 
  - name: Jenkins 
    hosted: self 
  - name: AWS 
    hosted: cloudProvider


===================================================================================
Create a repository--> add read me file

click on Actions --> click on create a workflow by yourself link

Add the below code. Save the main.yml


name: My first workflow  
on: workflow_dispatch     
jobs:
 job1:
  runs-on: ubuntu-latest
  steps:
   - name: Print a Greeting
     run: echo "Hello All"
   - name: Print goodbyee
     run : echo "Bye Bye"


commit the file

Go to Actions --> click on your workflow name on left side --> click on Run workflow.

=================================================================================
Demo 2: Manual execution -> multiple jobs -> Jobs run in prallel

Go repo--> .github/workflows folder --> open the main.yml file --> remove the previous code and add the below code


name: My first workflow  
on: workflow_dispatch     
jobs:
 job1:
  runs-on: ubuntu-latest
  steps:
   - name: Print a Greeting
     run: echo "Hello All"
   - name: Print goodbyee
     run : echo "Bye Bye"
 job2:
  runs-on: ubuntu-latest
  steps:
   - name: Run a one-line script 
     run: echo "Hello World"


Save the file and run it 
Go to Actions --> click on your workflow name on left side --> click on Run workflow.
===========================================================================
Demo 3:

Go repo--> .github/workflows folder --> open the main.yml file --> remove the previous code and add the below code

name: My first workflow with multi-line code
on: workflow_dispatch     
jobs:
 job1:
  runs-on: ubuntu-latest
  steps:
   - name: Print a Greeting
     run: echo "Hello All"
   - name: Print goodbyee
     run : echo "Bye Bye"
 job2:
  runs-on: ubuntu-latest
  steps:
   - name: Run a one-line script 
     run: echo "Hello World"
 buildJob:
  runs-on: ubuntu-latest
  steps:
   - name: Run a multi-line script 
     run: |
      hostname -s
      echo "Compile code"
      echo "maven test code"
      echo "maven package code"


Save the file and run it 
Go to Actions --> click on your workflow name on left side --> click on Run workflow.











