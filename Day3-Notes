Launch the DevOps labs on SL portal and create an ec2 server of iMage ubuntu

Self Hosted Runners on github Actions:
========================================
A self hosted runner are servers that you will create and maintain to exeucte your jobs on github actions.
With self hosted runner we will have more control on the server with respect to OS version, softwares and packages
self hosted runner -> you can have your custom configuration and packages on server.
self hosted runner connect to github using github actions self hosted runner application


Demo:
==============================
Create an ec2 server
Create a new repo with readme file in it

Go to repo --> go to repo settings--> left side --> actions--> click on it -->you will see runners --> click on it --> on right side self hosted runners--> click on it

Configure and run the Runner.

Now go to actions --> create a workflow 

name: Jobs on selfhosted runner 
on:
  push:
    branches:
      - main 
jobs:
  reviewJob:
   runs-on: self-hosted
   steps:
    - name: review the code 
      run: echo "review the code"
  buildJob:
   runs-on: self-hosted
   steps:
    - name: build the code 
      run: echo "Build the code"



==================================================
Build and Deploy Java application usign github actions:
====================================================
1. Fork the given repository:

# https://github.com/Sonal0409/DevOps-Capstone-Project.git

Go to actions --> click on setup your own workflow 
Add the below script:

name: CI/CD workflow 
on:
  push:
   branches:
     - master
jobs:
  buildandDeploy:
    runs-on: ubuntu-latest
    steps:
     - name: Clone the code
       uses: actions/checkout@v4
     - name: Download Java and Maven
       uses: actions/setup-java@v4
       with: 
        distribution: 'temurin'
        java-version: '11'
        cache: 'maven'
     - name: Build the code 
       run: mvn package


Save the file
go to actions and see job execution

==========================================================
Creation of secret action variables in github repository and using them on github action workflow.
==========================================================
Whenever we have to use sensitive data on our workflow, we will create secret envrionment variables on github repo 
we will then refer to the variable in the workflow.
In action workflow we refer to the variable as ${{secrets.VARIABLE}}

Demo: 
Go to settings  of the repo --> On the left side you will see secrets and variables --> click on it --> Click on Actions --> Click on Secrets 
Click on Repository secrets --> Give name as DOCKERHUB_USERNAME  --> give value --> click on add secret
Scroll down --> click on New repository secret --> give name as DOCKERHUB_TOKEN --> give dockerhub password -->click on add secret

Now you will see 2 secrets created.

=========================================================
Write the workflow to build and then install docker on the runner and also loginto docker hub 
=======================================================

Go to the Repository with java code --> go to actions --> edit the main.yml file --> remove the previous code and add this code

name: CI/CD workflow 
on:
  push:
   branches:
     - master
jobs:
  buildandDeploy:
    runs-on: ubuntu-latest
    steps:
     - name: Clone the code
       uses: actions/checkout@v4
     - name: Download Java and Maven
       uses: actions/setup-java@v4
       with: 
        distribution: 'temurin'
        java-version: '11'
        cache: 'maven'
     - name: Setup Docker 
       uses: docker/setup-buildx-action@v3
     - name: Build the code 
       run: mvn package
     - name: Loginto Dockerhub 
       uses: docker/login-action@v3
       with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

===============================================================
Go to the repository with java code and create a new file
Give name to file -> dockerfile

add below content:

FROM tomcat:8
COPY target/java-example.war /usr/local/tomcat/webapps/ROOT.war
EXPOSE 8080
CMD ["catalina.sh", "run"]



























